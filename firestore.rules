
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Default rule: Deny all reads and writes by default for security.
    match /{document=**} {
      allow read, write: if false;
    }

    // Rules for User Profiles - Allow users to read/update their own profile
    match /users/{userId} {
      // Any authenticated user can create their own user document.
      allow create: if request.auth != null && request.auth.uid == userId;
      // A user can only read their own document.
      allow read: if request.auth != null && request.auth.uid == userId;
      // A user can only update their own document.
      allow update: if request.auth != null && request.auth.uid == userId;
      // Deletes are disallowed for user accounts.
      allow delete: if false;
    }

    // Rules for Artisan Profiles - Publicly readable, but only writable by the artisan themselves
    match /artisanProfiles/{artisanId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == artisanId;
      // Only allow updates by the owning user
      allow update: if request.auth != null && request.auth.uid == artisanId;
      // Deletes are disallowed for safety
      allow delete: if false;
    }
    
    // Rules for Products - Publicly readable, writable only by the artisan
    match /products/{productId} {
      allow read: if true;
      // Allow create/update only if the user is authenticated and is the listed artisan
      allow create, update: if request.auth != null && request.auth.uid == request.resource.data.artisanId;
      // Allow delete only if the user is authenticated and is the artisan of the existing document
      allow delete: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/products/$(productId)).data.artisanId;
      
      // Rules for Product Reviews (subcollection)
      match /reviews/{reviewId} {
        allow read: if true;
        // Any authenticated user can create a review
        allow create: if request.auth != null;
        // Only the user who wrote the review can update or delete it
        allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      }
    }
    
    // Rules for Orders - Readable by the buyer and the artisan
    match /orders/{orderId} {
      // Allow read if the user is the buyer or the artisan associated with the order.
      allow read: if request.auth != null && (request.auth.uid == resource.data.userId || request.auth.uid == resource.data.artisanId);
      // Allow create for any authenticated user (the buyer)
      allow create: if request.auth != null;
      // Allow update only by the artisan, for changing status etc.
      allow update: if request.auth != null && request.auth.uid == resource.data.artisanId;
      // Disallow deletes for record-keeping
      allow delete: if false;

      // Rules for Order Items (subcollection) - Inherits parent rules in this setup
      match /items/{itemId} {
         // Same read rule as parent order
         allow read: if request.auth != null && (request.auth.uid == get(/databases/$(database)/documents/orders/$(orderId)).data.userId || request.auth.uid == get(/databases/$(database)/documents/orders/$(orderId)).data.artisanId);
         allow create, update, delete: if false; // Items should not be changed after order creation
      }
    }
    
    // Rules for Notifications - Readable only by the target artisan
    match /notifications/{notificationId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.artisanId;
      // Any authenticated user (a buyer sending a message) can create a notification
      allow create: if request.auth != null;
    }
  }
}

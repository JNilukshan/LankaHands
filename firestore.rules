
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users can only read and modify their own user document.
    match /users/{userId} {
      allow read, update, create: if request.auth != null && request.auth.uid == userId;
    }
    
    // Artisan profiles are public to read, but only the artisan can update it.
    match /artisanProfiles/{artisanId} {
      allow read: if true;
      allow update: if request.auth != null && request.auth.uid == artisanId;
    }
    
    // Products are public to read. Only the associated artisan can create, update, or delete them.
    match /products/{productId} {
      allow read: if true;
      allow create, update: if request.auth != null && request.auth.uid == request.resource.data.artisanId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.artisanId;
      
      // Reviews subcollection
      match /reviews/{reviewId} {
        allow read: if true;
        allow create: if request.auth != null; // Anyone logged in can create a review
      }
    }
    
    // Orders can be created by any authenticated user.
    // They can be read by the buyer who placed the order or the artisan fulfilling it.
    match /orders/{orderId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null && (request.auth.uid == resource.data.userId || request.auth.uid == resource.data.artisanId);
      // Generally, orders should not be updated or deleted by clients directly, but managed by backend functions.
      // We can add update rules here if needed, for example, for a customer to cancel a pending order.
      allow update: if request.auth != null && (request.auth.uid == resource.data.userId || request.auth.uid == resource.data.artisanId);
    }
  }
}

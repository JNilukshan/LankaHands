
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isUserAuthenticated() {
      return request.auth != null;
    }
    
    function isUserRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users Collection
    // Users can read their own profile, and update their own profile data.
    // Creation is handled by Firebase Auth functions, not directly by clients.
    match /users/{userId} {
      allow read: if isUserAuthenticated() && isOwner(userId);
      allow update: if isUserAuthenticated() && isOwner(userId);
      // Deny create/delete to prevent users from creating accounts outside of auth flow
      // or deleting their user record.
      allow create, delete: if false;
    }

    // Artisan Profiles Collection
    // Anyone can read public artisan profiles.
    // Only the artisan themselves (who must be a seller) can create or update their profile.
    match /artisanProfiles/{artisanId} {
      allow read: if true;
      allow create: if isUserAuthenticated() && isUserRole('seller') && isOwner(artisanId);
      allow update: if isUserAuthenticated() && isOwner(artisanId);
      allow delete: if false; // Disallow deleting profiles for now
    }

    // Products Collection
    // Anyone can read products.
    // Only authenticated sellers can create products, and they must own them.
    // Only the artisan who owns the product can update or delete it.
    match /products/{productId} {
      allow read: if true;
      allow create: if isUserAuthenticated() && isUserRole('seller') && request.resource.data.artisanId == request.auth.uid;
      allow update: if isUserAuthenticated() && resource.data.artisanId == request.auth.uid;
      allow delete: if isUserAuthenticated() && resource.data.artisanId == request.auth.uid;

      // Reviews Subcollection
      // Anyone can read reviews.
      // Any authenticated user can create a review.
      // Only the user who wrote the review can update or delete it.
      match /reviews/{reviewId} {
        allow read: if true;
        allow create: if isUserAuthenticated();
        allow update, delete: if isUserAuthenticated() && resource.data.userId == request.auth.uid;
      }
    }
    
    // Orders Collection
    // Users can only read their own orders. Artisans can read orders for their products.
    // Only authenticated users can create orders.
    // Updating status should be restricted, perhaps to an admin or the artisan.
    match /orders/{orderId} {
      allow read: if isUserAuthenticated() && 
                      (resource.data.userId == request.auth.uid || resource.data.artisanId == request.auth.uid);
      allow create: if isUserAuthenticated();
      // Allow artisans to update order status, but not other fields.
      allow update: if isUserAuthenticated() && 
                       isUserRole('seller') && 
                       resource.data.artisanId == request.auth.uid &&
                       request.resource.data.keys().hasOnly(['status', 'lastUpdatedAt', 'trackingNumber']);
      allow delete: if false; // Do not allow orders to be deleted.
      
      // Items Subcollection should inherit read permissions from parent order.
      match /items/{itemId} {
         allow read: if get(/databases/$(database)/documents/orders/$(orderId)).data.userId == request.auth.uid ||
                      get(/databases/$(database)/documents/orders/$(orderId)).data.artisanId == request.auth.uid;
         allow create, update, delete: if false; // These are part of the order, not standalone.
      }
    }
    
    // Notifications Collection
    // Only the target artisan can read or update (e.g., mark as read) their notifications.
    match /notifications/{notificationId} {
      allow read, update, delete: if isUserAuthenticated() && resource.data.artisanId == request.auth.uid;
      // Creation is handled by server-side logic (e.g., Cloud Functions or Server Actions)
      allow create: if isUserAuthenticated(); // Allow authenticated users to send messages, which creates a notification
    }
  }
}
